// ==================================================
// xmli.h
// Xml file I/O with authomatic index generating
// layer between xmlf and xmloi2
//


#ifndef xmli_included
#define xmli_included


// ================================================== class XmlI
class XmlI
{
public:
   HRESULT m_lhOpenResult;

   unsigned char lpszFName[KP_MAX_FNAME_LEN+1]; // file name

   XmlO1 *FilePtr;                          // pointer to lower level file
   const int *aiFileIndexLengthsPtr;            // array of index entries lengths

   TvXmlTagStack *lpTagStack;

   KpChar iFirstDictTag;                           // start character code for first tag in arrays
   KpChar iLastDictTag;                            // code after the last tag character
   const unsigned char **plpszaTagNames;     // XML dictionary tag names, array size [iLastDictTag-iFirstDictTag]
                                             // even entries - opening tags with '<' and '>', odd - closing
                                             //    tags with possible delimiters
                                             //    closing tags for single tags (</ttt>) must be ""

private:
   const unsigned char **lppszFileIndexNamesPtr;// array of index files names extentions
   int iNumOfIndexes;                           // number of index files
   int aiXmlTagIxIx[XC_TG_NumOfDictTags00];     // index file identifiers, generated by XmlI() from
                                                //    lppszFileIndexNamesPtr[] and lpszaXmlTagIxNames[]
                                                //    0 means no output to any indexes

   const unsigned char *acIndexLanguages;       // index language codes
   const EC_Types *aiIndexEncodings;            // index encoding types / codetables

   long lEntryId;       // current processed dictionary entry id (<se id=...> value)

   XmlIs_IndexRecord *pCurIndexBuf;         // current output index buffer;
   XmlIs_IndexRecord *pCurTxIndexBuf;       // current TX index buffer;
                                                //    NULL - no current index
   int m_iInsideOfXr;                           // supress index output, when >0
                                                // praleisti nuorodas indeksiniuose laukuose
                                                // mcm paslepti autoriai

   int iCurIxTag;                               // currently output index tag
                                                //    0 - no currently output index

   bool m_bProcessSubkeys;   // switches off all subkey processing if False

public:
   KpChar lpiazBaseSav[TV_XL_HW_IX_LEN+1];         // buffer for saving of base word for '~' supplement
private:
   bool bPutToBase;                             // contents of lpiazBaseSav collecting flag

public:
// ------------------------------- open file
   XmlI
   (
      const unsigned char *lpszFname,
      const unsigned char *lpszMode,

      XmlfLowLevelCrFun CreateLowLevelObj,
#if FALSE
      HRESULT CreateLowLevelObj
      (
         KpFile **lppFileObjPtrPtr,
         const unsigned char *lpszFNam,
         const unsigned char *lpszFMod,
         XL_FileTypes uiFTyp,
         bool bMapToPrivate
      ),   
#endif
      const unsigned char **plpszaXmlSpCharTags,
      const unsigned char **lppszFileIndexNames,
      const int *aiFileIndexLengths,
      const unsigned char *acIndexLangs,
      const EC_Types *aiIndexEncs,
      KpChar iFirstTag,
      const unsigned char **plpszaTags,
      XmlVersions iVersion,
      const int *piaCodeTables,
      bool bMultiLine,
      bool bMapToPrivate,
      bool bProcessSubkeys    // switches off all MCM subkey processing if False
   );                                  // Opens FilePtr, look XmlO1()
   ~XmlI();

   HRESULT GetOpenResult(void);        // Returns value of OpenResult -
                                       //    object creation error code

   HRESULT GetFileMode(bool *pbBinFl, bool *pbWriteFl, bool *pbAppendFl);
                                       // tests whether file is binary, output and for append

// get/set file encoding parameters
   HRESULT GetEncoding(UC_Modes *piEncMode, int *piCodeTable, int *piDefCodeTable);
   HRESULT SetEncoding(UC_Modes iEncMode, int iCodeTable, int iDefCodeTable);

   HRESULT GetVersion(XmlVersions *piVersion);     // Gets XML version - value of iXmlVers

   HRESULT SetPathMode(XL_PathMode iPathMode); // former HRESULT SetAbsPaths(bool bAbsPaths); 
   XL_PathMode GetPathMode(void); // former bool GetAbsPaths(void); 

   HRESULT SetScale(int iScale); 
   int GetScale(void);

   HRESULT Reset(void); // reset RAM file

   HRESULT CloseFile(bool bCheckFileExist);
                                       // Closes current Xml file
                                       //    this call makes sence only for result code retrieving,
                                       //    after CloseFile() no other calls except ~TvXmlO_tag()
                                       //    are acceptable
                                       //    Uses FilePtr
                                       //    if bCheckFileExist==FALSE, error messages will be supressed

// ------------------------------- text input
   HRESULT GetCharProc
   (
      KpChar *piInch,
      XmlTagPars **pTagParsPtr,
      bool bCheckFeof,
      bool bProcSpcEol
   );
                                 // Gets current char. from data file, scans numeric and
                                 //    text parameters of XML tags
                                 // *pTagParsPtr - pointer to returned tag parameter list
                                 //    if pTagParsPtr==NULL - parameters will not be returned
                                 //    if returned pointer *pTagParsPtr!=NULL, it must be deleted by calling application
                                 // bCheckFeof is used to swith on end of file error
                                 //    output
                                 // bProcSpcEol - collect multiple spaces ant eols to one space
                                 // Uses FilePtr

   HRESULT UnGetCharProc(KpChar iOutch, XmlTagPars *pTagPars);
                                       // unget character to data file
                                       // pTagPars can be deleted after UnGetCharProc()

   HRESULT GetNumVal(long *plValue, bool bCheckFeof);
                                    // Scans file as text for first occurence of
                                    //    decimal long number
                                    // Does not take into account
                                    //    fFiles[].UngetChar() presence, so
                                    //    GetNumVal() can not be used after SkipEol()
                                    // bCheckFeof is used to swith on end of file error
                                    //    output

   HRESULT SkipEol(void);
                                    // skips spaces and tabs and eols until first eol
                                    //    is reached
                                    //    Uses FilePtr

   HRESULT SkipSpaces(void);
                                    // skips spaces and tabs and eols
                                    //    Uses FilePtr

   HRESULT SkipToCharProc(KpChar uiDelimCh);
                                    // skips input file chars, until uiDelimCh is reached

// ------------------------------- text output
   HRESULT PutChar(KpChar iOutch, XmlTagPars *pTagPars);
                                       // additional processing for not multiline files
   HRESULT PutCharProc(KpChar iOutch, XmlTagPars *pTagPars);                                  // Put character to data file
                                       // generate index entries corresponding to lppszFileIndexNamesPtr[]
                                       //    pTagPars - parameters for XML tags.
                                       //    Uses FilePtr

   HRESULT PutStr(const unsigned char *lpszOutstr);
                                       // Put string to file
                                       //    Uses FilePtr

   HRESULT PutKpStr(const KpChar *iazOutstr); // former PutIntStr
                                       // Put Kpt char string to file
                                       //    Uses FilePtr

   HRESULT PutNumVal(const long lValue);
                                       // Put numeric value, formatting as long decimal
                                       //    integer.
                                       //    Uses FilePtr

   HRESULT GetCharPos(int *piCharPos);
                                       // Returns output character position in the
                                       //    output text row
                                       //    Uses FilePtr

   HRESULT GetCharNum(long *plCharNum);
                                       // Returns output character position in the
                                       //    output file
                                       //    Uses FilePtr

   HRESULT SetBaseIndent(const unsigned char *lpszBaseIndent);
   HRESULT GetBaseIndent(const unsigned char **plpszBaseIndentPtr);
   HRESULT SetIndent(const unsigned char *lpszIndent);
                                       // set indent string for new lines

   HRESULT GetCurTagStrict(/* enum XmlDictChars */ KpChar *piCurTag);
                                       // calls lpTagStack->GetCurTag() and ConvTagStrict()
                                       // converts XC_ExampleTransl to XC_TrWord etc.

// ------------------------------- keyword search, part of xmls.cpp
   HRESULT SearchEntry
   (
      long *plEntryIdx,
      long *plOffset,
      const unsigned char *lpszKeyword,
      int iFileIndex,
      bool bTestNotFound
   );                            // searches keyword lpszKeyword in index file
                                 // for exact occurence first, then for context (beginning of the word)
                                 //    iFileIndex, returns associated main entry
                                 //    index in plEntryIdx.
                                 // if bTestNotFound==FALSE, error processing will be
                                 //    suppressed
                                 // iFileIndex - index identifier
                                 // *plOffset - returned offset in index file corresponding
                                 //    to key, >=lpszKeyword, value is legal, even 
                                 //    in case of KP_E_KWD_NOT_FOUND

   HRESULT SearchEntryFirst
   (
      long *plEntryIdx,
      long *plOffset,
      const unsigned char *lpszKeyword,
      int iFileIndex,
      bool bTestNotFound
   );                            // SearchEntry() and roll back to the first context 
                                 // occurence of search keyword in the index

   HRESULT GetImage
   (
      void *lpBuffer,
      int iByteCount,
      int iFileIndex,
      bool bCheckFeof
   );                               // gets binary image from file to buffer
                                    // Takes into account fFiles[].UngetChar(),
                                    //    can be used after SkipEol()
                                    // bCheckFeof is used to swith on end of file error
                                    //    output

   HRESULT Fseek(int iFileIndex, const long lOffset, int iOrigin);
                                    // analog of fseek();
   HRESULT Ftell(int iFileIndex, long *plOffset);   // analog of ftell();

   HRESULT SeekEntry(const long lEntryIdx, long *plEntryLen = NULL); // sets pointer of input data file to start of entry lEntryIdx

// reads entry lEntryIdx contents into the buffer *plpszEntryImg
// allocates space necessary for *plpszEntryImg
// could be used for encoded datafiles
   HRESULT ReadEntryImg(long lEntryIdx, unsigned char **plpszEntryImg, long *plEntryLen);

   HRESULT PutImage
   (
      const void *lpBuffer,
      int iByteCount,
      int iFileIndex
   );                               // puts binary image to the file from buffer
};


// ----------------------------------------- free functions
extern HRESULT PutXmlHatI(XmlI *pOutFile, const unsigned char *lpszFileName);
extern HRESULT PutXmlTailI(XmlI *pOutFile);

extern HRESULT ConvTagStrict(/* enum XmlDictChars */ KpChar *piCurTag);
#endif





