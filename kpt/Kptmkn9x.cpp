// Make cp_XXXX.nls code page file for Win9x

#include "envdef.h"
#include "envir.h"
#include "envsupp.h"

#include	<stdlib.h>
#include	<stdio.h>

#include "kpstdlib.h"
#include "kptt.h"
#include "kperr.h"

#include "tvxml.h"

// all *_SIZE's in bytes

// #define CODE_TABLE 49
#define CODE_TABLE 46


#define HEADER_PRESENT 1
#define HEADER_SIZE 0x62
#define DCBS 1 // 1 byte coding
#define CT_2_UNI_SIZE (KPT_Ctbsiz*2) // codetable to unicode table size
#define CT_2_UNI_PRESENT 1 // codetable to unicode present
#define CT_2_UNI_DOS_PRESENT 1 // codetable to unicode for DOS present
#define CT_2_UNI_DCBS_PRES 0 // codetable to unicode additional 2-byte coding part not present

#define MAX_NUM_OF_UNI_PAGES 16
#define UNI_CODE_MAP_SIZE ((KPT_Utbsiz>>8)*2)
#define UNI_PAGE_HEADER_SIZE (16*2)
#define UNI_PAGE_SIZE (UNI_PAGE_HEADER_SIZE+(KPT_Ctbsiz*2))

// #define UNI_2_CT_SIZE 0xE60  // unicode to codetable table size, must be calculated dynamically!!!
#define UNI_2_CT_SIZE (UNI_CODE_MAP_SIZE+UNI_PAGE_SIZE*num_of_uni_pages)

#define UNI_2_CT_PRES 1  // unicode to codetable present

#define TO_UPPER_SIZE KPT_Ctbsiz // to upper table size
#define TO_UPPER_PRES 1 // to upper table present
#define TO_LOWER_SIZE KPT_Ctbsiz // to lower table size
#define TO_LOWER_PRES 1 // to lower table present
#define NO_ACC_SIZE KPT_Ctbsiz // no accents table size
#define NO_ACC_PRES 1 // no accents table present
#define SORT_SIZE (KPT_Ctbsiz*4) // sort table size
#define SORT_PRES 1 // sort table present
#define UNKN_SIZE 12 // unknown table size
#define UNKN_PRES 1 // unknown table present
#define CHAR_TYP_SIZE (KPT_Ctbsiz*2) // char types table size
#define CHAR_TYP_1_PRES 1 // char types 1 present
#define CHAR_TYP_2_PRES 1 // char types 2 present
#define CHAR_TYP_3_PRES 1 // char types 3 present
#define EXCEPT_SIZE 346 // exceptions table size
#define EXCEPT_PRES 1 // exceptions table present

int num_of_uni_pages;
// unicode pages position - 2-byte words count from beginning of 
// the unicode to codepage table
unsigned short U_2_code_map[UNI_CODE_MAP_SIZE/2];
// pointers to unicode pages in memory
short *uni_page_ptrs[MAX_NUM_OF_UNI_PAGES];


const unsigned short Uni2cp_Dump[]={
/* 000460/ */         0x0110, 0x0120, 0x0130, 0x0140, 0x0150, 0x0160, 0x0170,
/* 000470/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000480/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000490/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0004a0/ */ 0x0100, 0x0180, 0x0190, 0x01a0, 0x01b0, 0x0100, 0x01c0, 0x01d0,
/* 0004b0/ */ 0x01e0, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0004c0/ */ 0x0100, 0x01f0, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0004d0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0004e0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0004f0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,

/* 000500/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000510/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000520/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000530/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000540/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000550/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000560/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000570/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000580/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000590/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0005a0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0005b0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0005c0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0005d0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0005e0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 0005f0/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,

/* 000600/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000610/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000620/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000630/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000640/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000650/ */ 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100,
/* 000660/ */ 0x0100, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000670/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000680/ */ 0x0200, 0x0210, 0x0220, 0x0230, 0x0240, 0x0250, 0x0260, 0x0270,
/* 000690/ */ 0x0280, 0x0200, 0x0200, 0x0290, 0x02a0, 0x02b0, 0x02c0, 0x02d0,
/* 0006a0/ */ 0x02e0, 0x02f0, 0x0300, 0x0310, 0x0320, 0x0330, 0x0340, 0x0350,
/* 0006b0/ */ 0x0360, 0x0370, 0x0380, 0x0390, 0x03a0, 0x03b0, 0x03c0, 0x03d0,
/* 0006c0/ */ 0x03e0, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x03f0,
/* 0006d0/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0400, 0x0410, 0x0420, 0x0200,
/* 0006e0/ */ 0x0200, 0x0430, 0x0200, 0x0200, 0x0440, 0x0200, 0x0200, 0x0200,
/* 0006f0/ */ 0x0450, 0x0200, 0x0200, 0x0200, 0x0460, 0x0200, 0x0200, 0x0200,

/* 000700/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000710/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0470, 0x0200, 0x0200, 0x0200,
/* 000720/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000730/ */ 0x0200, 0x0480, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000740/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0490,
/* 000750/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000760/ */ 0x0200, 0x04a0, 0x04b0, 0x04c0, 0x04d0, 0x04e0, 0x0200, 0x0200,
/* 000770/ */ 0x04f0, 0x0500, 0x0200, 0x0510, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000780/ */ 0x0200, 0x0520, 0x0530, 0x0540, 0x0550, 0x0200, 0x0200, 0x0200,
/* 000790/ */ 0x0200, 0x0200, 0x0560, 0x0570, 0x0200, 0x0200, 0x0200, 0x0200,
/* 0007a0/ */ 0x0200, 0x0580, 0x0590, 0x05a0, 0x05b0, 0x0200, 0x0200, 0x05c0,
/* 0007b0/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x05d0, 0x0200, 0x0200,
/* 0007c0/ */ 0x0200, 0x05e0, 0x0200, 0x05f0, 0x0200, 0x0200, 0x0200, 0x0200,
/* 0007d0/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 0007e0/ */ 0x0200, 0x0600, 0x0610, 0x0620, 0x0630, 0x0200, 0x0640, 0x0650,
/* 0007f0/ */ 0x0200, 0x0660, 0x0670, 0x0680, 0x0690, 0x06a0, 0x06b0, 0x0200,

/* 000800/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x06c0, 0x06d0, 0x0200, 0x06e0,
/* 000810/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000820/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x06f0, 0x0200,
/* 000830/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000840/ */ 0x0200, 0x0700, 0x0710, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000850/ */ 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200, 0x0200,
/* 000860/ */ 0x0720, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000870/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000880/ */ 0x003f, 0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006,
/* 000890/ */ 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e,
/* 0008a0/ */ 0x000f, 0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016,
/* 0008b0/ */ 0x0017, 0x0018, 0x0019, 0x001a, 0x001b, 0x001c, 0x001d, 0x001e,
/* 0008c0/ */ 0x001f, 0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026,
/* 0008d0/ */ 0x0027, 0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e,
/* 0008e0/ */ 0x002f, 0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036,
/* 0008f0/ */ 0x0037, 0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e,

/* 000900/ */ 0x003f, 0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046,
/* 000910/ */ 0x0047, 0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e,
/* 000920/ */ 0x004f, 0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056,
/* 000930/ */ 0x0057, 0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e,
/* 000940/ */ 0x005f, 0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066,
/* 000950/ */ 0x0067, 0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e,
/* 000960/ */ 0x006f, 0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076,
/* 000970/ */ 0x0077, 0x0078, 0x0079, 0x007a, 0x007b, 0x007c, 0x007d, 0x007e,
/* 000980/ */ 0x007f, 0x00ff, 0x0021, 0x0096, 0x009c, 0x009f, 0x0059, 0x00a7,
/* 000990/ */ 0x00f5, 0x003f, 0x00a8, 0x0061, 0x00ae, 0x00aa, 0x00f0, 0x00a9,
/* 0009a0/ */ 0x00c4, 0x00f8, 0x00f1, 0x00fd, 0x00fc, 0x003f, 0x00e6, 0x00f4,
/* 0009b0/ */ 0x00fa, 0x003f, 0x00fb, 0x006f, 0x00af, 0x00ac, 0x00ab, 0x00f3,
/* 0009c0/ */ 0x003f, 0x0041, 0x003f, 0x003f, 0x0041, 0x008e, 0x008f, 0x0092,
/* 0009d0/ */ 0x003f, 0x0045, 0x0090, 0x0045, 0x003f, 0x0049, 0x003f, 0x003f,
/* 0009e0/ */ 0x0049, 0x003f, 0x004e, 0x004f, 0x00e0, 0x003f, 0x00e5, 0x0099,
/* 0009f0/ */ 0x009e, 0x009d, 0x0055, 0x003f, 0x0055, 0x009a, 0x003f, 0x003f,

/* 000a00/ */ 0x00e1, 0x0061, 0x003f, 0x003f, 0x0061, 0x0084, 0x0086, 0x0091,
/* 000a10/ */ 0x003f, 0x0063, 0x0082, 0x0065, 0x003f, 0x0069, 0x003f, 0x003f,
/* 000a20/ */ 0x0069, 0x003f, 0x006e, 0x006f, 0x00a2, 0x003f, 0x00e4, 0x0094,
/* 000a30/ */ 0x00f6, 0x009b, 0x0075, 0x003f, 0x0075, 0x0081, 0x003f, 0x003f,
/* 000a40/ */ 0x0079, 0x00a0, 0x0083, 0x003f, 0x003f, 0x00b5, 0x00d0, 0x0080,
/* 000a50/ */ 0x0087, 0x0043, 0x0063, 0x0043, 0x0063, 0x00b6, 0x00d1, 0x003f,
/* 000a60/ */ 0x003f, 0x003f, 0x003f, 0x00ed, 0x0089, 0x0045, 0x0065, 0x00b8,
/* 000a70/ */ 0x00d3, 0x00b7, 0x00d2, 0x003f, 0x003f, 0x0047, 0x0067, 0x0047,
/* 000a80/ */ 0x0067, 0x0047, 0x0067, 0x0095, 0x0085, 0x0048, 0x0068, 0x0048,
/* 000a90/ */ 0x0068, 0x0049, 0x0069, 0x00a1, 0x008c, 0x0049, 0x0069, 0x00bd,
/* 000aa0/ */ 0x00d4, 0x0049, 0x0069, 0x003f, 0x003f, 0x004a, 0x006a, 0x00e8,
/* 000ab0/ */ 0x00e9, 0x003f, 0x003f, 0x003f, 0x00ea, 0x00eb, 0x003f, 0x003f,
/* 000ac0/ */ 0x003f, 0x003f, 0x00ad, 0x0088, 0x00e3, 0x00e7, 0x00ee, 0x00ec,
/* 000ad0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x00e2, 0x0093, 0x004f,
/* 000ae0/ */ 0x006f, 0x003f, 0x003f, 0x004f, 0x006f, 0x003f, 0x003f, 0x008a,
/* 000af0/ */ 0x008b, 0x003f, 0x003f, 0x0097, 0x0098, 0x0053, 0x0073, 0x003f,

/* 000b00/ */ 0x003f, 0x00be, 0x00d5, 0x003f, 0x003f, 0x003f, 0x003f, 0x0054,
/* 000b10/ */ 0x0074, 0x0055, 0x0075, 0x00c7, 0x00d7, 0x0055, 0x0075, 0x003f,
/* 000b20/ */ 0x003f, 0x003f, 0x003f, 0x00c6, 0x00d6, 0x0057, 0x0077, 0x0059,
/* 000b30/ */ 0x0079, 0x0059, 0x008d, 0x00a5, 0x00a3, 0x00a4, 0x00cf, 0x00d8,
/* 000b40/ */ 0x003f, 0x0062, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000b50/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000b60/ */ 0x003f, 0x003f, 0x0046, 0x0066, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000b70/ */ 0x0049, 0x003f, 0x003f, 0x006c, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000b80/ */ 0x004f, 0x004f, 0x006f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000b90/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x0074, 0x003f, 0x003f, 0x0054,
/* 000ba0/ */ 0x0055, 0x0075, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x007a,
/* 000bb0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000bc0/ */ 0x003f, 0x007c, 0x003f, 0x003f, 0x0021, 0x003f, 0x003f, 0x003f,
/* 000bd0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x0041, 0x0061,
/* 000be0/ */ 0x0049, 0x0069, 0x004f, 0x006f, 0x0055, 0x0075, 0x0055, 0x0075,
/* 000bf0/ */ 0x0055, 0x0075, 0x0055, 0x0075, 0x0055, 0x0075, 0x003f, 0x0041,

/* 000c00/ */ 0x0061, 0x003f, 0x003f, 0x003f, 0x003f, 0x0047, 0x0067, 0x0047,
/* 000c10/ */ 0x0067, 0x004b, 0x006b, 0x004f, 0x006f, 0x004f, 0x006f, 0x003f,
/* 000c20/ */ 0x003f, 0x006a, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000c30/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000c40/ */ 0x003f, 0x003f, 0x0067, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000c50/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000c60/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000c70/ */ 0x003f, 0x003f, 0x0027, 0x0022, 0x0027, 0x0027, 0x003f, 0x003f,
/* 000c80/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x005e, 0x003f, 0x005e,
/* 000c90/ */ 0x003f, 0x0027, 0x00c4, 0x003f, 0x0060, 0x003f, 0x005f, 0x003f,
/* 000ca0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000cb0/ */ 0x003f, 0x003f, 0x003f, 0x00f8, 0x003f, 0x007e, 0x003f, 0x003f,
/* 000cc0/ */ 0x003f, 0x0060, 0x003f, 0x005e, 0x007e, 0x00c4, 0x00c4, 0x003f,
/* 000cd0/ */ 0x003f, 0x003f, 0x003f, 0x00f8, 0x003f, 0x003f, 0x003f, 0x0022,
/* 000ce0/ */ 0x003f, 0x003f, 0x005f, 0x005f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000cf0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,

/* 000d00/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000d10/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003b,
/* 000d20/ */ 0x003f, 0x003f, 0x003f, 0x00e1, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000d30/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x0075, 0x003f, 0x003f,
/* 000d40/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000d50/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x0068, 0x003f, 0x003f, 0x003f,
/* 000d60/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000d70/ */ 0x003f, 0x003f, 0x003a, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000d80/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000d90/ */ 0x003f, 0x003f, 0x003f, 0x0025, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000da0/ */ 0x003f, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020,
/* 000db0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000dc0/ */ 0x003f, 0x002d, 0x002d, 0x003f, 0x002d, 0x002d, 0x003f, 0x003f,
/* 000dd0/ */ 0x003f, 0x0027, 0x00ef, 0x0027, 0x003f, 0x00f2, 0x00a6, 0x00f7,
/* 000de0/ */ 0x003f, 0x00c5, 0x00c5, 0x0007, 0x003f, 0x0007, 0x003f, 0x0007,
/* 000df0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,

/* 000e00/ */ 0x003f, 0x0025, 0x003f, 0x0027, 0x0022, 0x003f, 0x0022, 0x003f,
/* 000e10/ */ 0x003f, 0x003f, 0x003c, 0x003e, 0x003f, 0x0013, 0x003f, 0x003f,
/* 000e20/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x002f, 0x003f, 0x003f,
/* 000e30/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000e40/ */ 0x003f, 0x0030, 0x003f, 0x003f, 0x003f, 0x0034, 0x0035, 0x0036,
/* 000e50/ */ 0x0037, 0x0038, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000e60/ */ 0x003f, 0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036,
/* 000e70/ */ 0x0037, 0x0038, 0x0039, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000e80/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x004c, 0x003f, 0x003f,
/* 000e90/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000ea0/ */ 0x003f, 0x003f, 0x003f, 0x0043, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000eb0/ */ 0x0045, 0x003f, 0x003f, 0x0067, 0x0048, 0x0048, 0x0048, 0x0068,
/* 000ec0/ */ 0x003f, 0x0049, 0x0049, 0x004c, 0x006c, 0x003f, 0x004e, 0x003f,
/* 000ed0/ */ 0x003f, 0x0050, 0x0050, 0x0051, 0x0052, 0x0052, 0x0052, 0x003f,
/* 000ee0/ */ 0x003f, 0x003f, 0x003f, 0x0074, 0x003f, 0x005a, 0x003f, 0x003f,
/* 000ef0/ */ 0x003f, 0x005a, 0x003f, 0x004b, 0x0041, 0x0042, 0x0043, 0x0065,

/* 000f00/ */ 0x0065, 0x0045, 0x0046, 0x003f, 0x004d, 0x006f, 0x003f, 0x003f,
/* 000f10/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000f20/ */ 0x003f, 0x001b, 0x0018, 0x001a, 0x0019, 0x001d, 0x0012, 0x003f,
/* 000f30/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000f40/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000f50/ */ 0x003f, 0x0017, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000f60/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x004f, 0x003f,
/* 000f70/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000f80/ */ 0x003f, 0x003f, 0x003f, 0x002d, 0x002d, 0x003f, 0x002f, 0x005c,
/* 000f90/ */ 0x002a, 0x00f8, 0x00f9, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000fa0/ */ 0x001c, 0x003f, 0x003f, 0x003f, 0x007c, 0x003f, 0x003f, 0x003f,
/* 000fb0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000fc0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003a,
/* 000fd0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x007e, 0x003f, 0x003f,
/* 000fe0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 000ff0/ */ 0x003f, 0x003f, 0x003f, 0x00ae, 0x00af, 0x003f, 0x003f, 0x003f,

/* 001000/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x0007, 0x003f,
/* 001010/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001020/ */ 0x003f, 0x003f, 0x003f, 0x007f, 0x005e, 0x003f, 0x003f, 0x003f,
/* 001030/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001040/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001050/ */ 0x003f, 0x003f, 0x003c, 0x003e, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001060/ */ 0x003f, 0x00c4, 0x003f, 0x00b3, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001070/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x00da, 0x003f, 0x003f,
/* 001080/ */ 0x003f, 0x00bf, 0x003f, 0x003f, 0x003f, 0x00c0, 0x003f, 0x003f,
/* 001090/ */ 0x003f, 0x00d9, 0x003f, 0x003f, 0x003f, 0x00c3, 0x003f, 0x003f,
/* 0010a0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x00b4, 0x003f, 0x003f,
/* 0010b0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x00c2, 0x003f, 0x003f,
/* 0010c0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x00c1, 0x003f, 0x003f,
/* 0010d0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x00c5, 0x003f, 0x003f,
/* 0010e0/ */ 0x003f, 0x00cd, 0x00ba, 0x003f, 0x003f, 0x00c9, 0x003f, 0x003f,
/* 0010f0/ */ 0x00bb, 0x003f, 0x003f, 0x00c8, 0x003f, 0x003f, 0x00bc, 0x003f,

/* 001100/ */ 0x003f, 0x00cc, 0x003f, 0x003f, 0x00b9, 0x003f, 0x003f, 0x00cb,
/* 001110/ */ 0x003f, 0x003f, 0x00ca, 0x003f, 0x003f, 0x00ce, 0x003f, 0x003f,
/* 001120/ */ 0x003f, 0x00df, 0x003f, 0x003f, 0x003f, 0x00dc, 0x003f, 0x003f,
/* 001130/ */ 0x003f, 0x00db, 0x003f, 0x003f, 0x003f, 0x00dd, 0x003f, 0x003f,
/* 001140/ */ 0x003f, 0x00de, 0x00b0, 0x00b1, 0x00b2, 0x003f, 0x003f, 0x003f,
/* 001150/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001160/ */ 0x003f, 0x00fe, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001170/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x0016, 0x003f, 0x003f,
/* 001180/ */ 0x003f, 0x003f, 0x003f, 0x001e, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001190/ */ 0x003f, 0x003f, 0x003f, 0x0010, 0x003f, 0x001f, 0x003f, 0x003f,
/* 0011a0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x0011, 0x003f, 0x003f,
/* 0011b0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x0009, 0x003f, 0x003f, 0x003f,
/* 0011c0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 0011d0/ */ 0x003f, 0x0008, 0x000a, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 0011e0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 0011f0/ */ 0x003f, 0x003f, 0x003f, 0x0001, 0x0002, 0x000f, 0x003f, 0x003f,

/* 001200/ */ 0x003f, 0x000c, 0x003f, 0x000b, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001210/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001220/ */ 0x003f, 0x0006, 0x003f, 0x003f, 0x0005, 0x003f, 0x0003, 0x0004,
/* 001230/ */ 0x003f, 0x003f, 0x003f, 0x000d, 0x000e, 0x003f, 0x003f, 0x003f,
/* 001240/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001250/ */ 0x003f, 0x007c, 0x003f, 0x003f, 0x0027, 0x0027, 0x0022, 0x0022,
/* 001260/ */ 0x003f, 0x0020, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001270/ */ 0x003f, 0x003c, 0x003e, 0x00ae, 0x00af, 0x003f, 0x003f, 0x003f,
/* 001280/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 001290/ */ 0x003f, 0x003f, 0x003f, 0x005b, 0x005d, 0x003f, 0x0022, 0x0022,
/* 0012a0/ */ 0x0022, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f, 0x003f,
/* 0012b0/ */ 0x003f, 0x003f, 0x003f, 0x003f, 0x0007, 0x005f, 0x003f, 0x003f,
/* 0012c0/ */ 0x003f
};


const unsigned short Sort_Dump[]={
/* 0015c0/ */         0x0000, 0x0000, 0x0603, 0x0202, 0x0604, 0x0202, 0x0605,
/* 0015d0/ */ 0x0202, 0x0606, 0x0202, 0x0607, 0x0202, 0x0608, 0x0202, 0x0609,
/* 0015e0/ */ 0x0202, 0x060a, 0x0202, 0x0705, 0x0202, 0x0706, 0x0202, 0x0707,
/* 0015f0/ */ 0x0202, 0x0708, 0x0202, 0x0709, 0x0202, 0x060b, 0x0202, 0x060c,

/* 001600/ */ 0x0202, 0x060d, 0x0202, 0x060e, 0x0202, 0x060f, 0x0202, 0x0610,
/* 001610/ */ 0x0202, 0x0611, 0x0202, 0x0612, 0x0202, 0x0613, 0x0202, 0x0614,
/* 001620/ */ 0x0202, 0x0615, 0x0202, 0x0616, 0x0202, 0x0617, 0x0202, 0x0618,
/* 001630/ */ 0x0202, 0x0619, 0x0202, 0x061a, 0x0202, 0x061b, 0x0202, 0x061c,
/* 001640/ */ 0x0202, 0x0702, 0x0202, 0x071c, 0x0202, 0x071d, 0x0202, 0x071f,
/* 001650/ */ 0x0202, 0x0721, 0x0202, 0x0723, 0x0202, 0x0725, 0x0202, 0x0680,
/* 001660/ */ 0x0202, 0x0727, 0x0202, 0x072a, 0x0202, 0x072d, 0x0202, 0x0803,
/* 001670/ */ 0x0202, 0x072f, 0x0202, 0x0682, 0x0202, 0x0733, 0x0202, 0x0735,
/* 001680/ */ 0x0202, 0x0c03, 0x0202, 0x0c21, 0x0202, 0x0c33, 0x0202, 0x0c46,
/* 001690/ */ 0x0202, 0x0c58, 0x0202, 0x0c6a, 0x0202, 0x0c7d, 0x0202, 0x0c90,
/* 0016a0/ */ 0x0202, 0x0ca2, 0x0202, 0x0cb4, 0x0202, 0x0737, 0x0202, 0x073a,
/* 0016b0/ */ 0x0202, 0x080e, 0x0202, 0x0812, 0x0202, 0x0814, 0x0202, 0x073c,
/* 0016c0/ */ 0x0202, 0x073e, 0x0202, 0x0e02, 0x1202, 0x0e09, 0x1202, 0x0e0a,
/* 0016d0/ */ 0x1202, 0x0e1a, 0x1202, 0x0e21, 0x1202, 0x0e23, 0x1202, 0x0e25,
/* 0016e0/ */ 0x1202, 0x0e2c, 0x1202, 0x0e32, 0x1202, 0x0e35, 0x1202, 0x0e36,
/* 0016f0/ */ 0x1202, 0x0e48, 0x1202, 0x0e51, 0x1202, 0x0e70, 0x1202, 0x0e7c,

/* 001700/ */ 0x1202, 0x0e7e, 0x1202, 0x0e89, 0x1202, 0x0e8a, 0x1202, 0x0e91,
/* 001710/ */ 0x1202, 0x0e99, 0x1202, 0x0e9f, 0x1202, 0x0ea2, 0x1202, 0x0ea4,
/* 001720/ */ 0x1202, 0x0ea6, 0x1202, 0x0ea7, 0x1202, 0x0ea9, 0x1202, 0x073f,
/* 001730/ */ 0x0202, 0x0741, 0x0202, 0x0742, 0x0202, 0x0743, 0x0202, 0x0744,
/* 001740/ */ 0x0202, 0x0748, 0x0202, 0x0e02, 0x0202, 0x0e09, 0x0202, 0x0e0a,
/* 001750/ */ 0x0202, 0x0e1a, 0x0202, 0x0e21, 0x0202, 0x0e23, 0x0202, 0x0e25,
/* 001760/ */ 0x0202, 0x0e2c, 0x0202, 0x0e32, 0x0202, 0x0e35, 0x0202, 0x0e36,
/* 001770/ */ 0x0202, 0x0e48, 0x0202, 0x0e51, 0x0202, 0x0e70, 0x0202, 0x0e7c,
/* 001780/ */ 0x0202, 0x0e7e, 0x0202, 0x0e89, 0x0202, 0x0e8a, 0x0202, 0x0e91,
/* 001790/ */ 0x0202, 0x0e99, 0x0202, 0x0e9f, 0x0202, 0x0ea2, 0x0202, 0x0ea4,
/* 0017a0/ */ 0x0202, 0x0ea6, 0x0202, 0x0ea7, 0x0202, 0x0ea9, 0x0202, 0x074a,
/* 0017b0/ */ 0x0202, 0x074c, 0x0202, 0x074e, 0x0202, 0x0750, 0x0202, 0x061d,
/* 0017c0/ */ 0x0202, 0x0e0a, 0x120e, 0x0e9f, 0x0213, 0x0e21, 0x020e, 0x0e02,
/* 0017d0/ */ 0x0217, 0x0e02, 0x0213, 0x0e25, 0x021c, 0x0e02, 0x021a, 0x0e0a,
/* 0017e0/ */ 0x020e, 0x0e48, 0x021f, 0x0e21, 0x0217, 0x0e8a, 0x121c, 0x0e8a,
/* 0017f0/ */ 0x021c, 0x0e32, 0x0217, 0x0ea9, 0x120e, 0x0e02, 0x1213, 0x0e02,

/* 001800/ */ 0x121a, 0x0e21, 0x120e, 0x0202, 0x0000, 0x0200, 0x0000, 0x0e7c,
/* 001810/ */ 0x0217, 0x0e7c, 0x0213, 0x0e25, 0x121c, 0x0a02, 0x0202, 0x0e91,
/* 001820/ */ 0x120e, 0x0e91, 0x020e, 0x0e7c, 0x1213, 0x0e9f, 0x1213, 0x0e7c,
/* 001830/ */ 0x0221, 0x0a03, 0x0202, 0x0e7c, 0x1221, 0x081c, 0x0202, 0x0a04,
/* 001840/ */ 0x0202, 0x0e02, 0x1217, 0x0e32, 0x1217, 0x0e7c, 0x020e, 0x0ea9,
/* 001850/ */ 0x1210, 0x0ea9, 0x0210, 0x0ea9, 0x020e, 0x077e, 0x0202, 0x0752,
/* 001860/ */ 0x0202, 0x0a07, 0x0202, 0x0a09, 0x0202, 0x0a08, 0x0202, 0x0c19,
/* 001870/ */ 0x0202, 0x0c15, 0x0202, 0x0e48, 0x121f, 0x0818, 0x0202, 0x081a,
/* 001880/ */ 0x0202, 0x09fe, 0x0204, 0x09fe, 0x0205, 0x09fe, 0x0206, 0x09e8,
/* 001890/ */ 0x0303, 0x09f0, 0x0203, 0x0e02, 0x121b, 0x0e0a, 0x1214, 0x0e21,
/* 0018a0/ */ 0x121b, 0x0e21, 0x1210, 0x09f0, 0x020d, 0x09e8, 0x020b, 0x09ec,
/* 0018b0/ */ 0x0209, 0x09ee, 0x0209, 0x0e32, 0x121b, 0x0e91, 0x1214, 0x09ec,
/* 0018c0/ */ 0x0203, 0x09ed, 0x0203, 0x09f2, 0x0203, 0x09f1, 0x0203, 0x09ef,
/* 0018d0/ */ 0x0203, 0x09e5, 0x0203, 0x09f3, 0x0203, 0x0e9f, 0x121b, 0x0e9f,
/* 0018e0/ */ 0x1217, 0x09ed, 0x0209, 0x09eb, 0x0209, 0x09f2, 0x020d, 0x09f1,
/* 0018f0/ */ 0x020d, 0x09ef, 0x020d, 0x09e5, 0x020b, 0x09f3, 0x0215, 0x0ea9,

/* 001900/ */ 0x1214, 0x0e02, 0x021b, 0x0e0a, 0x0214, 0x0e21, 0x021b, 0x0e21,
/* 001910/ */ 0x0210, 0x0e32, 0x021b, 0x0e91, 0x0214, 0x0e9f, 0x021b, 0x0e9f,
/* 001920/ */ 0x0217, 0x0ea9, 0x0214, 0x09ee, 0x0203, 0x09eb, 0x0203, 0x09fe,
/* 001930/ */ 0x0203, 0x09fa, 0x0204, 0x09fa, 0x0205, 0x09fa, 0x0206, 0x09fa,
/* 001940/ */ 0x0203, 0x0e7c, 0x120e, 0x0201, 0x0000, 0x0e7c, 0x1217, 0x0e70,
/* 001950/ */ 0x120e, 0x0e7c, 0x0219, 0x0e7c, 0x1219, 0x0a0b, 0x0202, 0x0e70,
/* 001960/ */ 0x020e, 0x0e36, 0x121c, 0x0e36, 0x021c, 0x0e48, 0x121c, 0x0e48,
/* 001970/ */ 0x021c, 0x0e70, 0x021c, 0x0e21, 0x1217, 0x0e70, 0x121c, 0x077a,
/* 001980/ */ 0x0202, 0x0683, 0x0202, 0x0817, 0x0202, 0x077d, 0x0202, 0x0c1d,
/* 001990/ */ 0x0202, 0x0a0c, 0x0202, 0x0a06, 0x0202, 0x081d, 0x0202, 0x077f,
/* 0019a0/ */ 0x0202, 0x0a0a, 0x0202, 0x080b, 0x0202, 0x0a0d, 0x0202, 0x0c21,
/* 0019b0/ */ 0x0e02, 0x0c46, 0x0e02, 0x0c33, 0x0e02, 0x09bc, 0x0303, 0x0704,
/* 0019c0/ */ 0x0202
};


const unsigned short Unknown_Dump[]={
/* 0019c0/ */         0x0041, 0x0045, 0x0073, 0x0073, 0x0061, 0x0065
};


const unsigned short CharTyp_1_Dump[]={
/* 0019c0/ */                                                         0x0020,
/* 0019d0/ */ 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020,
/* 0019e0/ */ 0x0068, 0x0028, 0x0028, 0x0028, 0x0028, 0x0020, 0x0020, 0x0020,
/* 0019f0/ */ 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020,

/* 001a00/ */ 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0048,
/* 001a10/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
/* 001a20/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0084,
/* 001a30/ */ 0x0084, 0x0084, 0x0084, 0x0084, 0x0084, 0x0084, 0x0084, 0x0084,
/* 001a40/ */ 0x0084, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
/* 001a50/ */ 0x0181, 0x0181, 0x0181, 0x0181, 0x0181, 0x0181, 0x0101, 0x0101,
/* 001a60/ */ 0x0101, 0x0101, 0x0101, 0x0101, 0x0101, 0x0101, 0x0101, 0x0101,
/* 001a70/ */ 0x0101, 0x0101, 0x0101, 0x0101, 0x0101, 0x0101, 0x0101, 0x0101,
/* 001a80/ */ 0x0101, 0x0101, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
/* 001a90/ */ 0x0182, 0x0182, 0x0182, 0x0182, 0x0182, 0x0182, 0x0102, 0x0102,
/* 001aa0/ */ 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102,
/* 001ab0/ */ 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102,
/* 001ac0/ */ 0x0102, 0x0102, 0x0010, 0x0010, 0x0010, 0x0010, 0x0020, 0x0101,
/* 001ad0/ */ 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102,
/* 001ae0/ */ 0x0102, 0x0101, 0x0102, 0x0102, 0x0101, 0x0101, 0x0101, 0x0101,
/* 001af0/ */ 0x0102, 0x0101, 0x0102, 0x0102, 0x0101, 0x0010, 0x0101, 0x0102,

/* 001b00/ */ 0x0101, 0x0101, 0x0102, 0x0010, 0x0101, 0x0010, 0x0010, 0x0101,
/* 001b10/ */ 0x0101, 0x0102, 0x0101, 0x0102, 0x0102, 0x0010, 0x0010, 0x0010,
/* 001b20/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0101, 0x0010, 0x0010, 0x0010,
/* 001b30/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0101, 0x0101, 0x0101, 0x0101,
/* 001b40/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0101, 0x0101, 0x0010, 0x0010,
/* 001b50/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0101, 0x0101, 0x0010,
/* 001b60/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0101, 0x0102,
/* 001b70/ */ 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102,
/* 001b80/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0101,
/* 001b90/ */ 0x0102, 0x0101, 0x0101, 0x0102, 0x0101, 0x0010, 0x0102, 0x0101,
/* 001ba0/ */ 0x0102, 0x0101, 0x0102, 0x0102, 0x0101, 0x0101, 0x0010, 0x0010,
/* 001bb0/ */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
/* 001bc0/ */ 0x0010, 0x0010, 0x0014, 0x0014, 0x0014, 0x0010, 0x0048
};


const unsigned short CharTyp_2_Dump[]={
/* 001bc0/ */                                                         0x0000,
/* 001bd0/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 001be0/ */ 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 001bf0/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,

/* 001c00/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000a,
/* 001c10/ */ 0x000b, 0x000b, 0x0005, 0x0005, 0x0005, 0x0001, 0x000b, 0x000b,
/* 001c20/ */ 0x000b, 0x000b, 0x0005, 0x0007, 0x0005, 0x0004, 0x0004, 0x0003,
/* 001c30/ */ 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003,
/* 001c40/ */ 0x0003, 0x0007, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x0001,
/* 001c50/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001c60/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001c70/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001c80/ */ 0x0001, 0x0001, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b,
/* 001c90/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001ca0/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001cb0/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001cc0/ */ 0x0001, 0x0001, 0x000b, 0x000b, 0x000b, 0x000b, 0x0000, 0x0001,
/* 001cd0/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001ce0/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001cf0/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0005, 0x0001, 0x0001,

/* 001d00/ */ 0x0001, 0x0001, 0x0001, 0x0005, 0x0001, 0x000b, 0x0005, 0x0001,
/* 001d10/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x000b, 0x000b, 0x000b,
/* 001d20/ */ 0x000b, 0x000b, 0x000b, 0x000b, 0x0001, 0x000b, 0x000b, 0x000b,
/* 001d30/ */ 0x000b, 0x000b, 0x000b, 0x000b, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001d40/ */ 0x000b, 0x000b, 0x000b, 0x000b, 0x0001, 0x0001, 0x000b, 0x000b,
/* 001d50/ */ 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x0001, 0x0001, 0x000b,
/* 001d60/ */ 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x0001, 0x0001,
/* 001d70/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
/* 001d80/ */ 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x0001,
/* 001d90/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x000b, 0x0001, 0x0001,
/* 001da0/ */ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x000b, 0x000b,
/* 001db0/ */ 0x0005, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x0005,
/* 001dc0/ */ 0x000b, 0x000b, 0x0003, 0x0003, 0x0003, 0x000b, 0x000a
};



const unsigned short CharTyp_3_Dump[]={
/* 001dc0/ */                                                         0x0000,
/* 001dd0/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 001de0/ */ 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0000, 0x0000, 0x0000,
/* 001df0/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,

/* 001e00/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0048,
/* 001e10/ */ 0x0048, 0x0448, 0x0048, 0x0448, 0x0048, 0x0048, 0x0440, 0x0048,
/* 001e20/ */ 0x0048, 0x0048, 0x0048, 0x0048, 0x0440, 0x0048, 0x0448, 0x0040,
/* 001e30/ */ 0x0040, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040,
/* 001e40/ */ 0x0040, 0x0048, 0x0048, 0x0048, 0x0448, 0x0048, 0x0048, 0x0448,
/* 001e50/ */ 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040,
/* 001e60/ */ 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040,
/* 001e70/ */ 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040,
/* 001e80/ */ 0x8040, 0x8040, 0x0048, 0x0448, 0x0048, 0x0448, 0x0448, 0x0448,
/* 001e90/ */ 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040,
/* 001ea0/ */ 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040,
/* 001eb0/ */ 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040, 0x8040,
/* 001ec0/ */ 0x8040, 0x8040, 0x0048, 0x0048, 0x0048, 0x0448, 0x0000, 0x8003,
/* 001ed0/ */ 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003,
/* 001ee0/ */ 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003,
/* 001ef0/ */ 0x8000, 0x8000, 0x8003, 0x8003, 0x8003, 0x0048, 0x8003, 0x8003,

/* 001f00/ */ 0x8003, 0x8003, 0x8003, 0x0048, 0x8003, 0x0008, 0x0008, 0x8003,
/* 001f10/ */ 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x0088, 0x0048, 0x0008,
/* 001f20/ */ 0x0008, 0x0048, 0x0000, 0x0000, 0x8003, 0x0008, 0x0008, 0x0008,
/* 001f30/ */ 0x0008, 0x0008, 0x0008, 0x0008, 0x8003, 0x8003, 0x8003, 0x8003,
/* 001f40/ */ 0x0008, 0x0008, 0x0008, 0x0008, 0x8003, 0x8003, 0x0008, 0x0008,
/* 001f50/ */ 0x0008, 0x0008, 0x0008, 0x0408, 0x0008, 0x8003, 0x8003, 0x0008,
/* 001f60/ */ 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x8003, 0x8003,
/* 001f70/ */ 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003,
/* 001f80/ */ 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x8003,
/* 001f90/ */ 0x8000, 0x8003, 0x8003, 0x8003, 0x8003, 0x0008, 0x8003, 0x8003,
/* 001fa0/ */ 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x8003, 0x0088, 0x0408,
/* 001fb0/ */ 0x0008, 0x0088, 0x0000, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
/* 001fc0/ */ 0x0008, 0x0008, 0x0000, 0x0000, 0x0000, 0x0008, 0x0008
};




const unsigned short Exceptions_Dump[]={
/* 001fc0/ */                                                         0x0003,
/* 001fd0/ */ 0x0000, 0x0425, 0x0000, 0x000e, 0x0000, 0x0426, 0x0000, 0x0051,
/* 001fe0/ */ 0x0000, 0x0427, 0x0000, 0x0088, 0x0000, 0x0000, 0x0000, 0x0000,
/* 001ff0/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000d, 0x0012, 0x0000,

/* 002000/ */ 0x0000, 0x0000, 0x0056, 0x0ea1, 0x1202, 0x0057, 0x0ea1, 0x1203,
/* 002010/ */ 0x005a, 0x0e97, 0x1202, 0x0076, 0x0ea1, 0x0202, 0x0077, 0x0ea1,
/* 002020/ */ 0x0203, 0x007a, 0x0e97, 0x0202, 0x0081, 0x0ea5, 0x0202, 0x0084,
/* 002030/ */ 0x0ea3, 0x0202, 0x008e, 0x0ea3, 0x0202, 0x0094, 0x0ea4, 0x0202,
/* 002040/ */ 0x0099, 0x0ea4, 0x0202, 0x009a, 0x0ea5, 0x0202, 0x00be, 0x0e96,
/* 002050/ */ 0x1202, 0x00cf, 0x0e98, 0x1202, 0x00d5, 0x0e96, 0x0202, 0x00d8,
/* 002060/ */ 0x0e98, 0x0202, 0x00e4, 0x0ea2, 0x0202, 0x00e5, 0x0ea2, 0x0202,
/* 002070/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 002080/ */ 0x000d, 0x000e, 0x0000, 0x0000, 0x0000, 0x0085, 0x0e26, 0x0202,
/* 002090/ */ 0x0095, 0x0e26, 0x1202, 0x00b6, 0x0e0b, 0x1202, 0x00be, 0x0e97,
/* 0020a0/ */ 0x1202, 0x00cf, 0x0eab, 0x1202, 0x00d1, 0x0e0b, 0x0202, 0x00d5,
/* 0020b0/ */ 0x0e97, 0x0202, 0x00d8, 0x0eab, 0x0202, 0x00e8, 0x0e47, 0x1202,
/* 0020c0/ */ 0x00e9, 0x0e47, 0x0202, 0x00ea, 0x0e6f, 0x1202, 0x00eb, 0x0e6f,
/* 0020d0/ */ 0x0202, 0x00ec, 0x0e7b, 0x0202, 0x00ee, 0x0e7b, 0x1202, 0x0000,
/* 0020e0/ */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000d,
/* 0020f0/ */ 0x0008, 0x0000, 0x0000, 0x0000, 0x0059, 0x0e33, 0x1202, 0x0079,

/* 002100/ */ 0x0e33, 0x0202, 0x00b6, 0x0e0b, 0x1202, 0x00be, 0x0e97, 0x1202,
/* 002110/ */ 0x00cf, 0x0eab, 0x1202, 0x00d1, 0x0e0b, 0x0202, 0x00d5, 0x0e97,
/* 002120/ */ 0x0202, 0x00d8, 0x0eab, 0x0202
};



// ================================================== KpErrorProc_tag local functions
KpErrorProc_tag KpErrorProc(TRUE, 71);

// --------------------------------------------------
HRESULT KpErrorProc_tag::FormatErrorMessage
(
	const HRESULT lhRetc,
	unsigned char *lpszMsg
)
{
return(FormatErrorMessageMain(lhRetc, lpszMsg));
}


// --------------------------------------------------
void InitNewUniPage(short *page_ptr, int page_num)
{
int ii;
short *dptr;

   dptr=page_ptr;
   for(ii=0; ii<UNI_PAGE_HEADER_SIZE/2; ii++) 
      *(dptr++)=UNI_CODE_MAP_SIZE/2+
                page_num*UNI_PAGE_SIZE/2+
                UNI_PAGE_HEADER_SIZE/2+
                16*ii;

// printf("%x\n", UNI_CODE_MAP_SIZE/2+page_num*UNI_PAGE_SIZE/2+UNI_PAGE_HEADER_SIZE/2);

   for(ii=0; ii<KPT_Ctbsiz; ii++) *(dptr++)=C_Quest;
}


// --------------------------------------------------
void PutToUniTable(int iUniCode, int iCodeTableCode)
{
int page_code;
int page_num;
int char_code;

static int ch_cnt=0;

   page_code=(iUniCode&0xFF00)>>8;

   page_num=(U_2_code_map[page_code]-UNI_CODE_MAP_SIZE/2)/(UNI_PAGE_SIZE/2);
   if(page_num==0)
   {                      // allocate new page
      uni_page_ptrs[num_of_uni_pages]=new short[UNI_PAGE_SIZE/2];
      if(uni_page_ptrs[num_of_uni_pages]==NULL)
         printf("Out of memory\n");
      else 
      {
         page_num=num_of_uni_pages++;
         U_2_code_map[page_code]=UNI_CODE_MAP_SIZE/2+page_num*UNI_PAGE_SIZE/2;
// printf("%d %d %x\n", ch_cnt, page_code, U_2_code_map[page_code]);
         InitNewUniPage(uni_page_ptrs[page_num], page_num);  // init new page
      }
   }

   if(page_num!=0)
   {
      char_code=iUniCode&0xFF;
      uni_page_ptrs[page_num][UNI_PAGE_HEADER_SIZE/2+char_code]=iCodeTableCode;
   }

ch_cnt++;
}


// --------------------------------------------------
void PutUniTable(FILE *pOutFile)
{
int ii;
int out_word;

   for(ii=0; ii<UNI_CODE_MAP_SIZE/2; ii++)
   {
      out_word=U_2_code_map[ii];
      fwrite(&out_word, 2, 1, pOutFile);
   }

   for(ii=0; ii<num_of_uni_pages; ii++)
      fwrite(uni_page_ptrs[ii], UNI_PAGE_SIZE, 1, pOutFile);
}


// --------------------------------------------------
main()
{
FILE *out_file;
int out_word;
int ii;
int jj;
int kk;
int kpt_char;
int kpt_char_src;
Chars16 *pnts;
const unsigned char *txt_src;
const unsigned char *txt_dst;


// init Uinicode to codepage table map
   for(ii=0; ii<UNI_CODE_MAP_SIZE/2; ii++) U_2_code_map[ii]=UNI_CODE_MAP_SIZE/2;
   num_of_uni_pages=0;
   for(ii=0; ii<MAX_NUM_OF_UNI_PAGES; ii++) uni_page_ptrs[ii]=NULL;

// init default Uni page number 0
   uni_page_ptrs[num_of_uni_pages]=new short[UNI_PAGE_SIZE/2];
   if(uni_page_ptrs[num_of_uni_pages]==NULL)
      printf("Out of memory\n");
   else 
   {
      InitNewUniPage(uni_page_ptrs[num_of_uni_pages], num_of_uni_pages);  // init new page
      num_of_uni_pages++;
   }

// init Unicode to codepage table
   for(jj=0; jj<KPT_Ctbsiz; jj++)
   {
      if(jj<KPT_Ctbsiz/2) kpt_char=Ctptr8[CODE_TABLE*2][jj];  // lower part
      else kpt_char=Ctptr8[CODE_TABLE*2+1][jj-KPT_Ctbsiz/2]; // higher part
      if(kpt_char<0) kpt_char=C_Quest;  // 	C_Unkn, C_Noch
      out_word=iaUniChars[kpt_char];

if(jj==28)
jj=28;

      if((kpt_char>=0) && (out_word!=0)) PutToUniTable(out_word, jj);

// for(ii=0; ii<MAX_NUM_OF_UNI_PAGES; ii++) printf("%x ", uni_page_ptrs[ii]);
// printf("\n");

   }


   out_file=fopen("cp_773.nls","wb");
   if(out_file!=NULL)
   {

// header
      
#if HEADER_PRESENT
      out_word=DCBS-1; fwrite(&out_word, 2, 1, out_file);    // coding byte count
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=0x0026; fwrite(&out_word, 2, 1, out_file);    // signature 0x0026
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=(HEADER_SIZE/2)*CT_2_UNI_PRESENT; fwrite(&out_word, 2, 1, out_file);
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);    // codetable to unicode layout

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT)/2)*CT_2_UNI_DOS_PRESENT;
         fwrite(&out_word, 2, 1, out_file);                  // codetable to unicode for DOS layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT)/2)*CT_2_UNI_DCBS_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // additional codetable for 2-byte coding layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES)/2)*UNI_2_CT_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // unicode to codetable layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES)/2)*TO_UPPER_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // to upper table layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES+
                 TO_UPPER_SIZE*TO_UPPER_PRES)/2)*TO_LOWER_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // to lower table layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=0;            // skip 0 x 8
      for(ii=0; ii<8; ii++) fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES+
                 TO_UPPER_SIZE*TO_UPPER_PRES+
                 TO_LOWER_SIZE*TO_LOWER_PRES)/2)*NO_ACC_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // no accents table layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES+
                 TO_UPPER_SIZE*TO_UPPER_PRES+
                 TO_LOWER_SIZE*TO_LOWER_PRES+
                 NO_ACC_SIZE*NO_ACC_PRES)/2)*SORT_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // sort table layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES+
                 TO_UPPER_SIZE*TO_UPPER_PRES+
                 TO_LOWER_SIZE*TO_LOWER_PRES+
                 NO_ACC_SIZE*NO_ACC_PRES+
                 SORT_SIZE*SORT_PRES)/2)*UNKN_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // unknown table layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES+
                 TO_UPPER_SIZE*TO_UPPER_PRES+
                 TO_LOWER_SIZE*TO_LOWER_PRES+
                 NO_ACC_SIZE*NO_ACC_PRES+
                 SORT_SIZE*SORT_PRES+
                 UNKN_SIZE*UNKN_PRES)/2)*CHAR_TYP_1_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // char types 1 layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES+
                 TO_UPPER_SIZE*TO_UPPER_PRES+
                 TO_LOWER_SIZE*TO_LOWER_PRES+
                 NO_ACC_SIZE*NO_ACC_PRES+
                 SORT_SIZE*SORT_PRES+
                 UNKN_SIZE*UNKN_PRES+
                 CHAR_TYP_SIZE*CHAR_TYP_1_PRES)/2)*CHAR_TYP_2_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // char types 2 layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES+
                 TO_UPPER_SIZE*TO_UPPER_PRES+
                 TO_LOWER_SIZE*TO_LOWER_PRES+
                 NO_ACC_SIZE*NO_ACC_PRES+
                 SORT_SIZE*SORT_PRES+
                 UNKN_SIZE*UNKN_PRES+
                 CHAR_TYP_SIZE*CHAR_TYP_1_PRES+
                 CHAR_TYP_SIZE*CHAR_TYP_2_PRES)/2)*CHAR_TYP_3_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // char types 3 layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=((HEADER_SIZE+
                 CT_2_UNI_SIZE*CT_2_UNI_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DOS_PRESENT+
                 CT_2_UNI_SIZE*CT_2_UNI_DCBS_PRES+
                 UNI_2_CT_SIZE*UNI_2_CT_PRES+
                 TO_UPPER_SIZE*TO_UPPER_PRES+
                 TO_LOWER_SIZE*TO_LOWER_PRES+
                 NO_ACC_SIZE*NO_ACC_PRES+
                 SORT_SIZE*SORT_PRES+
                 UNKN_SIZE*UNKN_PRES+
                 CHAR_TYP_SIZE*CHAR_TYP_1_PRES+
                 CHAR_TYP_SIZE*CHAR_TYP_2_PRES+
                 CHAR_TYP_SIZE*CHAR_TYP_3_PRES)/2)*EXCEPT_PRES;
         fwrite(&out_word, 2, 1, out_file);                  // exceptions layout
      out_word=0x0000; fwrite(&out_word, 2, 1, out_file);

      out_word=DCBS; fwrite(&out_word, 2, 1, out_file);      // coding byte count

      out_word=C_Quest;            // substitution characters '?' x 4
      for(ii=0; ii<4; ii++) fwrite(&out_word, 2, 1, out_file);

      out_word=0;                  // substitution characters 0 x 6
      for(ii=0; ii<6; ii++) fwrite(&out_word, 2, 1, out_file);


// codetable to unicode tables
      for(ii=0; ii<CT_2_UNI_PRESENT+CT_2_UNI_DOS_PRESENT+CT_2_UNI_DCBS_PRES; ii++)
      {
         for(jj=0; jj<KPT_Ctbsiz; jj++)
         {
            if(jj<KPT_Ctbsiz/2) kpt_char=Ctptr8[CODE_TABLE*2][jj];  // lower part
            else kpt_char=Ctptr8[CODE_TABLE*2+1][jj-KPT_Ctbsiz/2]; // higher part
            if(kpt_char<0) kpt_char=C_Quest;  // 	C_Unkn, C_Noch
            out_word=iaUniChars[kpt_char];

            fwrite(&out_word, 2, 1, out_file);
         }
      }
#endif


// unicode to codetable tables
#if UNI_2_CT_PRES
// fwrite(Uni2cp_Dump, 1, UNI_2_CT_SIZE, out_file);

   PutUniTable(out_file);
#endif

// to upper table
#if TO_UPPER_PRES
      for(jj=0; jj<KPT_Ctbsiz; jj++)
      {
         if(jj<KPT_Ctbsiz/2) kpt_char=Ctptr8[CODE_TABLE*2][jj];  // lower part
         else kpt_char=Ctptr8[CODE_TABLE*2+1][jj-KPT_Ctbsiz/2]; // higher part
         if(kpt_char<0) kpt_char=C_Quest;  // 	C_Unkn, C_Noch

         kpt_char_src=kpt_char;

         pnts=KptUpLowTbl+1;
		   while(*pnts)
		   {
            if(*pnts==kpt_char)
            {
               kpt_char=(*(pnts-1));
               break;
            }
            pnts+=2;
         }
         out_word=(-1);
         for(kk=0; kk<KPT_Ctbsiz/2; kk++)
         {
            if(kpt_char==Ctptr8[CODE_TABLE*2][kk])
            {
               out_word=kk;
               break;
            }
         }
         if(out_word<0) for(kk=0; kk<KPT_Ctbsiz/2; kk++)
         {
            if(kpt_char==Ctptr8[CODE_TABLE*2+1][kk])
            {
               out_word=kk+KPT_Ctbsiz/2;
               break;
            }
         }

         if(out_word<0)
         {
            txt_src=plpszaXmlSpecCharTags[kpt_char_src];
            if(txt_src==NULL) txt_src=(const unsigned char *)"No XML";
            txt_dst=plpszaXmlSpecCharTags[kpt_char];
            if(txt_dst==NULL) txt_dst=(const unsigned char *)"No XML";
            printf("klaida 1 %s %s\n", txt_src, txt_dst);
            out_word=C_Quest;
         }
         fwrite(&out_word, 1, 1, out_file);
      }
#endif

#if TO_LOWER_PRES
      for(jj=0; jj<KPT_Ctbsiz; jj++)
      {
         if(jj<KPT_Ctbsiz/2) kpt_char=Ctptr8[CODE_TABLE*2][jj];  // lower part
         else kpt_char=Ctptr8[CODE_TABLE*2+1][jj-KPT_Ctbsiz/2]; // higher part
         if(kpt_char<0) kpt_char=C_Quest;  // 	C_Unkn, C_Noch

         pnts=KptUpLowTbl;
		   while(*pnts)
		   {
            if(*pnts==kpt_char)
            {
               kpt_char=(*(pnts+1));
               break;
            }
            pnts+=2;
         }
         out_word=(-1);
         for(kk=0; kk<KPT_Ctbsiz/2; kk++)
         {
            if(kpt_char==Ctptr8[CODE_TABLE*2][kk])
            {
               out_word=kk;
               break;
            }
         }
         if(out_word<0) for(kk=0; kk<KPT_Ctbsiz/2; kk++)
         {
            if(kpt_char==Ctptr8[CODE_TABLE*2+1][kk])
            {
               out_word=kk+KPT_Ctbsiz/2;
               break;
            }
         }

         if(out_word<0)
         {
            printf("klaida 1\n");
            out_word=C_Quest;
         }
         fwrite(&out_word, 1, 1, out_file);
      }
#endif

      
#if NO_ACC_PRES
      for(jj=0; jj<KPT_Ctbsiz; jj++)
      {
         if(jj<KPT_Ctbsiz/2) kpt_char=Ctptr8[CODE_TABLE*2][jj];  // lower part
         else kpt_char=Ctptr8[CODE_TABLE*2+1][jj-KPT_Ctbsiz/2]; // higher part
         if(kpt_char<0) kpt_char=C_Quest;  // 	C_Unkn, C_Noch

         kpt_char=KptToLatTbl[kpt_char];

         out_word=(-1);
         for(kk=0; kk<KPT_Ctbsiz/2; kk++)
         {
            if(kpt_char==Ctptr8[CODE_TABLE*2][kk])
            {
               out_word=kk;
               break;
            }
         }
         if(out_word<0) for(kk=0; kk<KPT_Ctbsiz/2; kk++)
         {
            if(kpt_char==Ctptr8[CODE_TABLE*2+1][kk])
            {
               out_word=kk+KPT_Ctbsiz/2;
               break;
            }
         }

         if(out_word<0)
         {
            printf("klaida 1\n");
            out_word=C_Quest;
         }
         fwrite(&out_word, 1, 1, out_file);
      }
#endif


#if SORT_PRES
      for(jj=0; jj<SORT_SIZE/2; jj++)
      {
         out_word=Sort_Dump[jj];
         fwrite(&out_word, 1, 2, out_file);
      }
#endif


#if UNKN_PRES
      for(jj=0; jj<UNKN_SIZE/2; jj++)
      {
         out_word=Unknown_Dump[jj];
         fwrite(&out_word, 1, 2, out_file);
      }
#endif


#if CHAR_TYP_1_PRES
      for(jj=0; jj<CHAR_TYP_SIZE/2; jj++)
      {
         out_word=CharTyp_1_Dump[jj];
         fwrite(&out_word, 1, 2, out_file);
      }
#endif


#if CHAR_TYP_2_PRES
      for(jj=0; jj<CHAR_TYP_SIZE/2; jj++)
      {
         out_word=CharTyp_2_Dump[jj];
         fwrite(&out_word, 1, 2, out_file);
      }
#endif


#if CHAR_TYP_3_PRES
      for(jj=0; jj<CHAR_TYP_SIZE/2; jj++)
      {
         out_word=CharTyp_3_Dump[jj];
         fwrite(&out_word, 1, 2, out_file);
      }
#endif


#if EXCEPT_PRES
      for(jj=0; jj<EXCEPT_SIZE/2; jj++)
      {
         out_word=Exceptions_Dump[jj];
         fwrite(&out_word, 1, 2, out_file);
      }
#endif


      if(ferror(out_file) || feof(out_file)) printf("File I/O error.\n");

      if(fclose(out_file)!=0) printf("Directory I/O error.\n");
   }
   else printf("Directory I/O error.\n");


// release memory
   for(ii=0; ii<num_of_uni_pages; ii++)
   {
      KP_DELETE(uni_page_ptrs[ii]);
   }

return(0);
}
